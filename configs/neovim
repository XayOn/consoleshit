if &compatible
  set nocompatible
endif

filetype plugin on
syntax on
set mouse=a
set number
set updatetime=80
let mapleader=","
set termguicolors
colorscheme onebuddy

" Load packager only when you need it
function! PackagerInit() abort
  packadd vim-packager
  call packager#init()
  call packager#add('kristijanhusak/vim-packager', { 'type': 'opt' })

  " Bar, statusline and filemanager
  call packager#add('romgrk/barbar.nvim')
  call packager#add('kyazdani42/nvim-tree.lua')
  call packager#add('glepnir/spaceline.vim')

  " LSP errors and actions 
  call packager#add('kosayoda/nvim-lightbulb')
  call packager#add('folke/trouble.nvim')
  call packager#add('folke/lsp-colors.nvim')

  " Treesitter LSP, refactor
  call packager#add('neovim/nvim-lspconfig')
  call packager#add('nvim-treesitter/nvim-treesitter', { 'do': ':TSUpdate'})

  " Jump to definitions, refactor etc. 
  call packager#add('nvim-treesitter/nvim-treesitter-refactor')
  call packager#add('hrsh7th/nvim-compe')

  " Show signature
  call packager#add('ray-x/lsp_signature.nvim')

  " Auto close tags, indent lines and show only current context
  call packager#add('cohama/lexima.vim')
  call packager#add('Yggdroot/indentLine')
  call packager#add('wellle/context.vim')

  " Snippets
  call packager#add('hrsh7th/vim-vsnip')
  call packager#add('hrsh7th/vim-vsnip-integ')

  " Git blame and signs
  call packager#add('APZelos/blamer.nvim')
  call packager#add('lewis6991/gitsigns.nvim')

  " Initial screen
  call packager#add('glepnir/dashboard-nvim')
  call packager#add('liuchengxu/vim-clap', { 'do': ':Clap install-binary!' })

  " Theme, icons and color
  call packager#add('tjdevries/colorbuddy.vim')
  call packager#add('Th3Whit3Wolf/onebuddy')
  call packager#add('ryanoasis/vim-devicons')
  call packager#add('kyazdani42/nvim-web-devicons')
  call packager#add('RRethy/vim-hexokinase')

  " Database management
  call packager#add('kristijanhusak/vim-dadbod-ui', {'requires': [
      \ 'tpope/vim-dadbod', 
      \ 'kristijanhusak/vim-dadbod-completion']})

  " Fuzzy finder
  call packager#add('nvim-telescope/telescope.nvim', {'requires': [
      \ 'nvim-lua/popup.nvim', 
      \ 'nvim-lua/plenary.nvim']})

  " Debugging
  call packager#add('mfussenegger/nvim-dap-python', {'requires': [
      \ 'mfussenegger/nvim-dap',  
      \ 'theHamsta/nvim-dap-virtual-text',
      \ 'rcarriga/nvim-dap-ui']})

  " Terminal
  call packager#add('vimlab/split-term.vim')

endfunction

command! -nargs=* -bar PackagerInstall call PackagerInit() | call packager#install(<args>)
command! -nargs=* -bar PackagerUpdate call PackagerInit() | call packager#update(<args>)
command! -bar PackagerClean call PackagerInit() | call packager#clean()
command! -bar PackagerStatus call PackagerInit() | call packager#status()

" Colorscheme
lua require('colorbuddy').colorscheme('onebuddy')

" ---------- Completion configuracion ----------------
" Setup completion.
lua require'lspconfig'.pyls.setup{on_attach=require'lsp_signature'.on_attach()}
set completeopt=menuone,noselect

lua << EOF
require'compe'.setup {
  enabled = true;
  autocomplete = true;
  preselect = 'enable';
  documentation = true;
  source = {
    vsnip = true;
    path = true;
    treesitter = true;
  };
}
EOF

let g:lexima_no_default_rules = v:true
call lexima#set_default_rules()
inoremap <silent><expr> <C-Space> compe#complete()
inoremap <silent><expr> <CR>      compe#confirm(lexima#expand('<LT>CR>', 'i'))
inoremap <silent><expr> <C-e>     compe#close('<C-e>')
inoremap <silent><expr> <C-f>     compe#scroll({ 'delta': +4 })
inoremap <silent><expr> <C-d>     compe#scroll({ 'delta': -4 })

lua vim.cmd([[ command! Format execute 'lua vim.lsp.buf.formatting()' ]])


" Terminal split below
set splitbelow
nnoremap <C-t> :10Term<cr>

" -------------- Debugger interface (open with f5) ----------------------
lua require('dap-python').setup('~/.virtualenvs/debugpy/bin/python')
lua require('dap-python').test_runner = 'pytest'
lua require("dapui").setup()

let g:dap_virtual_text = v:true
nnoremap <silent> <F5> :lua require'dap'.continue()<CR>
nnoremap <silent> <F10> :lua require'dap'.step_over()<CR>
nnoremap <silent> <F11> :lua require'dap'.step_into()<CR>
nnoremap <silent> <F12> :lua require'dap'.step_out()<CR>

nnoremap <silent> <leader>b :lua require'dap'.toggle_breakpoint()<CR>
nnoremap <silent> <leader>B :lua require'dap'.set_breakpoint(vim.fn.input('Breakpoint condition: '))<CR>
nnoremap <silent> <leader>lp :lua require'dap'.set_breakpoint(nil, nil, vim.fn.input('Log point message: '))<CR>
nnoremap <silent> <leader>dr :lua require'dap'.repl.open()<CR>
nnoremap <silent> <leader>dl :lua require'dap'.repl.run_last()<CR>
nnoremap <silent> <leader>dn :lua require('dap-python').test_method()<CR>
vnoremap <silent> <leader>ds <ESC>:lua require('dap-python').debug_selection()<CR>

" --------------- Telescope (fuzzy finder) and tree (filemanager) configuration ---------------
lua require('telescope').setup()
nnoremap <C-p> :Telescope find_files theme=get_dropdown<cr>
nnoremap <C-g> <cmd>Telescope live_grep<cr>
nnoremap <C-o> :NvimTreeToggle<CR>

" Error display. Sets up telescope results too.
lua require("trouble").setup {}

" Git blame
let g:blamer_enabled = 1
let g:blamer_show_in_insert_modes = 0
let g:blamer_delay = 300

" Spaceline configuration
let g:spaceline_seperate_style = 'slant-cons'
let g:spaceline_colorscheme = 'one'

let g:spaceline_custom_vim_status = {"n": "V","V":"ðŸ…¥ ","v":"ðŸ…¥ ","\<C-v>": "ðŸ…¥ ","i":"ðŸ…˜ ","R":"ðŸ…¡ ","s":"ðŸ…¢ ","t":"ðŸ…£ ","c":"ðŸ…’ ","!":"SE"}


" --- Setup treesitter

lua <<EOF
require'nvim-treesitter.configs'.setup {
  ensure_installed = "all", 
  context_commentstring = {
      enable = true
  },
  textobjects = {
      select = {
          enable = true,
          keymaps = {
              ["af"] = "@function.outer",
              ["if"] = "@function.inner",
              ["ac"] = "@class.outer",
              ["ic"] = "@class.inner"
          }
      }
  },
  refactor = {
    navigation = {
      enable = true,
      keymaps = {
        goto_definition = "gnd",
        list_definitions = "gnD",
        list_definitions_toc = "gO",
        goto_next_usage = "<a-*>",
        goto_previous_usage = "<a-#>",
      },
    },
  },
  highlight = {
    enable = true,
  },
}
EOF

inoremap <silent><expr> <TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

" --- Setup lightbulb (lsp action prompts)
autocmd CursorHold,CursorHoldI * lua require'nvim-lightbulb'.update_lightbulb()

