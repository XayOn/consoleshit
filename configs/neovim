if &compatible
  set nocompatible
endif

filetype plugin on
syntax on
set mouse=a
set number
set updatetime=80
let mapleader=","
set termguicolors
colorscheme onebuddy

" Load packager only when you need it
function! PackagerInit() abort
  packadd vim-packager
  call packager#init()
  call packager#add('kristijanhusak/vim-packager', { 'type': 'opt' })

  " Bar, statusline and filemanager
  call packager#add('romgrk/barbar.nvim')
  call packager#add('kyazdani42/nvim-tree.lua')
  call packager#add('glepnir/spaceline.vim')

  " Treesitter LSP and blame (completion, highlight and git integration)
  call packager#add('neovim/nvim-lspconfig')
  call packager#add('nvim-treesitter/nvim-treesitter', { 'do': ':TSUpdate'})
  call packager#add('haorenW1025/completion-nvim', {'requires': [
  \ 'nvim-treesitter/completion-treesitter',
  \ ['aca/completion-tabnine', { 'do': './install.sh' }]
  \ ]})
  call packager#add('f-person/git-blame.nvim')
  call packager#add('lewis6991/gitsigns.nvim')

  " Theme, icons and color
  call packager#add('tjdevries/colorbuddy.vim')
  call packager#add('Th3Whit3Wolf/onebuddy')
  call packager#add('ryanoasis/vim-devicons')
  call packager#add('kyazdani42/nvim-web-devicons')
  call packager#add('RRethy/vim-hexokinase')

  " Database management
  call packager#add('kristijanhusak/vim-dadbod-ui', {'requires': [
  \ 'tpope/vim-dadbod', 'kristijanhusak/vim-dadbod-completion']})

  " Fuzzy finder
  call packager#add('nvim-telescope/telescope.nvim', {'requires': ['nvim-lua/popup.nvim', 'nvim-lua/plenary.nvim']})

  " Debugging
  call packager#add('mfussenegger/nvim-dap-python', {'requires': [
  \ 'mfussenegger/nvim-dap', 'theHamsta/nvim-dap-virtual-text', 'nvim-telescope/telescope-dap.nvim']})

  " Terminal
  call packager#add('vimlab/split-term.vim')

endfunction

command! -nargs=* -bar PackagerInstall call PackagerInit() | call packager#install(<args>)
command! -nargs=* -bar PackagerUpdate call PackagerInit() | call packager#update(<args>)
command! -bar PackagerClean call PackagerInit() | call packager#clean()
command! -bar PackagerStatus call PackagerInit() | call packager#status()

" Recommended way. Requires a virtualenv with dap installed.
lua require('dap-python').setup('~/.virtualenvs/debugpy/bin/python')
lua require('dap-python').test_runner = 'pytest'
lua vim.g.dap_virtual_text = 'all frames'

" Colorscheme
lua require('colorbuddy').colorscheme('onebuddy')

" ---------- Completion configuracion ----------------
" Setup completion.
lua require'lspconfig'.pyls.setup{on_attach=require'completion'.on_attach}
let g:completion_chain_complete_list = {
    \ 'default': [
    \    {'complete_items': ['lsp', 'tabnine' ]},
    \    {'mode': '<c-p>'},
    \    {'mode': '<c-n>'}
    \]
\}
set completeopt=menuone,noinsert,noselect
inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

" Setup folding
set foldmethod=expr
set foldexpr=nvim_treesitter#foldexpr()

" Terminal split below
set splitbelow
nnoremap <C-t> :10Term<cr>

" --------------- Telescope (fuzzy finder) and tree (filemanager) configuration ---------------
lua require('telescope').setup()
nnoremap <C-p> :Telescope find_files theme=get_dropdown<cr>
nnoremap <C-g> <cmd>Telescope live_grep<cr>
nnoremap <C-o> :NvimTreeToggle<CR>


" -------------- Debugger ----------------------
nnoremap <silent> <F5> :lua require'dap'.continue()<CR>
nnoremap <silent> <F10> :lua require'dap'.step_over()<CR>
nnoremap <silent> <F11> :lua require'dap'.step_into()<CR>
nnoremap <silent> <F12> :lua require'dap'.step_out()<CR>

nnoremap <silent> <leader>b :lua require'dap'.toggle_breakpoint()<CR>
nnoremap <silent> <leader>B :lua require'dap'.set_breakpoint(vim.fn.input('Breakpoint condition: '))<CR>
nnoremap <silent> <leader>lp :lua require'dap'.set_breakpoint(nil, nil, vim.fn.input('Log point message: '))<CR>
nnoremap <silent> <leader>dr :lua require'dap'.repl.open()<CR>
nnoremap <silent> <leader>dl :lua require'dap'.repl.run_last()<CR>
nnoremap <silent> <leader>dn :lua require('dap-python').test_method()<CR>
vnoremap <silent> <leader>ds <ESC>:lua require('dap-python').debug_selection()<CR>

" Spaceline configuration
let g:spaceline_seperate_style = 'slant-cons'
let g:spaceline_colorscheme = 'one'

let g:spaceline_custom_vim_status = {"n": "V","V":"ðŸ…¥ ","v":"ðŸ…¥ ","\<C-v>": "ðŸ…¥ ","i":"ðŸ…˜ ","R":"ðŸ…¡ ","s":"ðŸ…¢ ","t":"ðŸ…£ ","c":"ðŸ…’ ","!":"SE"}

